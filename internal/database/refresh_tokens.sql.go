// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at) values ($1, NOW(), NOW(), $2, $3, $4) returning token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteRefreshTokenByToken = `-- name: DeleteRefreshTokenByToken :exec
delete from refresh_tokens where token = $1
`

func (q *Queries) DeleteRefreshTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByToken, token)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
select token, created_at, updated_at, user_id, expires_at, revoked_at from refresh_tokens where token = $1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const updateRefreshTokenByToken = `-- name: UpdateRefreshTokenByToken :exec
update refresh_tokens set token = $1, created_at = $2, updated_at = NOW(), user_id = $3, expires_at = $4, revoked_at = $5 where user_id = $3
`

type UpdateRefreshTokenByTokenParams struct {
	Token     string
	CreatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) UpdateRefreshTokenByToken(ctx context.Context, arg UpdateRefreshTokenByTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshTokenByToken,
		arg.Token,
		arg.CreatedAt,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	return err
}
